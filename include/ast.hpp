#pragma once

#include "ast/enum/enumerator.hpp"

#include "ast/expressions/binary_expr/add_expr.hpp"
#include "ast/expressions/binary_expr/and_expr.hpp"
#include "ast/expressions/binary_expr/assignment_expr.hpp"
#include "ast/expressions/binary_expr/binary_op.hpp"
#include "ast/expressions/binary_expr/div_expr.hpp"
#include "ast/expressions/binary_expr/eq_expr.hpp"
#include "ast/expressions/binary_expr/excl_or_expr.hpp"
#include "ast/expressions/binary_expr/ge_expr.hpp"
#include "ast/expressions/binary_expr/gt_expr.hpp"
#include "ast/expressions/binary_expr/incl_or_expr.hpp"
#include "ast/expressions/binary_expr/le_expr.hpp"
#include "ast/expressions/binary_expr/logical_and_expr.hpp"
#include "ast/expressions/binary_expr/logical_or_expr.hpp"
#include "ast/expressions/binary_expr/lshift_expr.hpp"
#include "ast/expressions/binary_expr/lt_expr.hpp"
#include "ast/expressions/binary_expr/mod_expr.hpp"
#include "ast/expressions/binary_expr/mul_expr.hpp"
#include "ast/expressions/binary_expr/ne_expr.hpp"
#include "ast/expressions/binary_expr/rshift_expr.hpp"
#include "ast/expressions/binary_expr/sub_expr.hpp"

#include "ast/expressions/unary_expr/addr_of_expr.hpp"
#include "ast/expressions/unary_expr/bit_not_expr.hpp"
#include "ast/expressions/unary_expr/deref_expr.hpp"
#include "ast/expressions/unary_expr/minus_expr.hpp"
#include "ast/expressions/unary_expr/not_expr.hpp"
#include "ast/expressions/unary_expr/plus_expr.hpp"
#include "ast/expressions/unary_expr/post_dec_expr.hpp"
#include "ast/expressions/unary_expr/post_inc_expr.hpp"
#include "ast/expressions/unary_expr/pre_dec_expr.hpp"
#include "ast/expressions/unary_expr/pre_inc_expr.hpp"
#include "ast/expressions/unary_expr/unary_op.hpp"

#include "ast/expressions/array_index.hpp"
#include "ast/expressions/function_call.hpp"
#include "ast/expressions/primary_expr.hpp"
#include "ast/expressions/ternary_op.hpp"

#include "ast/statements/iteration_statements/do_while_statement.hpp"
#include "ast/statements/iteration_statements/for_statement.hpp"
#include "ast/statements/iteration_statements/while_statement.hpp"

#include "ast/statements/jump_statements/break_statement.hpp"
#include "ast/statements/jump_statements/continue_statement.hpp"
#include "ast/statements/jump_statements/return_statement.hpp"

#include "ast/statements/labeled_statements/case_statement.hpp"
#include "ast/statements/labeled_statements/default_statement.hpp"

#include "ast/statements/selection_statements/if_else_statement.hpp"
#include "ast/statements/selection_statements/if_statement.hpp"
#include "ast/statements/selection_statements/switch_statement.hpp"

#include "ast/statements/compound_statement.hpp"

#include "ast/context.hpp"
#include "ast/declaration.hpp"
#include "ast/declarator.hpp"
#include "ast/empty_node.hpp"
#include "ast/function_def.hpp"
#include "ast/node_list.hpp"
#include "ast/node.hpp"
#include "ast/type_specifier.hpp"
#include "ast/utils.hpp"

extern Node *parseAST();
